/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clases.funciones;
import ObjetosDB.Kitproductos;
import ObjetosDB.Productos;
import ObjetosDB.Promociones;
import ObjetosDB.metodosDB;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 *
 * @author tars
 */
public class buscaProductoInventario extends javax.swing.JFrame {
    private  ArrayList<ObjetosDB.Productos> carroProductosLocal = new ArrayList<Productos>();
    private ArrayList<Productos> carroProductos;
    private             ArrayList<Productos> aux2a;

       private ArrayList<Promociones> promos=null;
    DefaultTableModel modelo0 = new DefaultTableModel();
    DefaultTableModel modelo1 = new DefaultTableModel(); // Tabla Productos
    javax.swing.JLabel j19, j20,j21,j22,j23;
    int montoDescuento=0;
    private javax.swing.JTable jTable0;
    /**
     * Creates new form buscaProductoInventario
     */
    public buscaProductoInventario(ArrayList<Productos> carroProductos, DefaultTableModel modelo0,javax.swing.JTable jTable1, javax.swing.JLabel j19, javax.swing.JLabel j20, javax.swing.JLabel j21, javax.swing.JLabel j22, int montoDescuento,ArrayList<Productos> aux2a,javax.swing.JLabel j23) {
        this.j19 = j19;
        this.j20 = j20;
        this.j21 = j21;
        this.j22 = j22;
              this.j23= j23;
        this.montoDescuento = montoDescuento;
        initComponents();
        this.carroProductos = carroProductos;
        this.modelo0 = modelo0;
        this.jTable0 =jTable1;
   
        
        
        
        this.aux2a=aux2a;
        try {
            
            iniciar();
        } catch (SQLException ex) {
            Logger.getLogger(buscaProductoInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private buscaProductoInventario() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Productos al Carro");
        setPreferredSize(new java.awt.Dimension(1280, 700));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos Disponibles"));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);

        jTree1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTree1.setRowHeight(23);
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTree1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Descripci√≥n Producto"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Nombre: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Tipo :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Marca :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Precio :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Proveedor :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Cantidad Actual: ");

        jLabel7.setText("Imagen de Referencia");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Add.png"))); // NOI18N
        jButton2.setText("Agregar Cantidad");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("-");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("-");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("-");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("-");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("-");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("-");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setText("-");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("-");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("Medida:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("Color:");

        jLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel18.setMaximumSize(new java.awt.Dimension(100, 100));

        jSpinner1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel1))
                                .addGap(8, 8, 8)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel10)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(219, 219, 219))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel13))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos a Agregar"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Remove.png"))); // NOI18N
        jButton5.setText("Quitar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Clear Green Button.png"))); // NOI18N
        jButton4.setText("Agregar todo y Finalizar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/zoom.png"))); // NOI18N
        jButton1.setText("BUSCAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/arrow_undo.png"))); // NOI18N
        jButton3.setText("Volver");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final int en =1;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           jTree1.getLastSelectedPathComponent();
        /* if nothing is selected */ 
        if (node == null) return;
        Object nodeInfo = node.getUserObject();
        Object[] object = new Object[9];
        Productos producto = null;
        int position=-1;
         String var=(String) nodeInfo;
         int resultado=0;
      
         
         
         
         
        {resultado=0;
            if (resultado!=-1)
    for (int j = 0 ; j<aux2a.size();j++)
                {resultado=0;
                  resultado = var.indexOf(aux2a.get(j).getNombre()+" "+aux2a.get(j).getTalla()+" "+aux2a.get(j).getMedida()+ "|  ID: "+aux2a.get(j).getId_producto());
                
                    if(resultado!=-1)
                    {
                      
                        position = j;
                      
                    }
                }
      producto=aux2a.get(position);
        if(validaSpinner())
            for(int i= 0; i<(int)jSpinner1.getValue();i++)
            {double imp=0;
                object[0]  = producto.getId_producto();
                object[1] = producto.getNombre();
                object[2] = producto.getTalla();
                object[3] = producto.getMarca();
                object[4] = producto.getTipo();
                if(producto.getHarina()==0){
                imp=  (double) (producto.getPrecioVenta()*1.0);
                    System.out.println(imp);
           int var2 = (int) Math.ceil(imp);
              
                    
                   object[5] =(int)imp;
            }else{
               imp=  (double) (producto.getPrecioVenta()*1.31);
                    System.out.println(imp);
           int var2 = (int) Math.ceil(imp);
              
                    object[5] =(int)imp;
            }
               
                object[6] = producto.getCodigo_barra();
                agregarTabla(object);
//                modelo1.addRow(object); 
                producto.setCantidadActual(producto.getCantidadActual()-1);
                jLabel13.setText(producto.getCantidadActual().toString());
                int index=-1;
                for (int j = 0 ; j<aux2a.size();j++)
                {
                      
                    if(aux2a.get(j).getId_producto() == producto.getId_producto())
                    {
                      
                        index = j;
                    }
                }
              
               int indice = aux2a.indexOf(producto.getId_producto());
                int cantidadp = producto.getCantidadp() -1;
                producto.setCantidadp(cantidadp);
                System.out.println("\nProducto"+producto.getNombre()+"cp:"+producto.getCantidadp());
                jLabel13.setText(Integer.toString(producto.getCantidadp()));
                aux2a.set(index, producto);
                carroProductosLocal.add(producto);
                pintaArbol();

                //rp
            }
                jTree1.requestFocus();
                jTextField1.requestFocus();
                            jLabel8.setText("-");
            jLabel9.setText("-");
            jLabel10.setText("-");
            jLabel11.setText("-");
            jLabel12.setText("-");
            jLabel13.setText("-");
            jLabel14.setText("-");
            jLabel15.setText("-");
            
            
         final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Informaci√≥n del Producto");
         
                deleteItem.addActionListener(new ActionListener() 
                {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                                int id = -1;
                                boolean error = false;
                                try{
                                    int s = jTable1.getSelectedRow();
                                     id = (int)jTable1.getValueAt(s, 0);
                                     
                                }catch(ArrayIndexOutOfBoundsException a)
                                {
                                    JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un item de la tabla");
                                    error = true;
                                }
                            if(error == false)
                             {
                                try {
                                    Productos p = new metodosDB().getProductoById(id);
                                    frameDescripcionProducto freim = new frameDescripcionProducto(p);
                                    freim.setVisible(true);
                                } catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(rootPane, "Error en el producto / producto no existe en base de datos");
                                }
                             }
                        }

                });
        popupMenu.add(deleteItem);
        jTable1.setComponentPopupMenu(popupMenu);
           jTree1.requestFocus();;
    }//GEN-LAST:event_jButton2ActionPerformed
} 
           public int calculaMonto(){
        int i =0;int valor=0;
        while(i<modelo1.getRowCount()){
        valor=valor+Integer.parseInt(modelo1.getValueAt(i, 6).toString())* Integer.parseInt(modelo1.getValueAt(i, 5).toString());
            i++;
        }return valor;
    }  
     
    public boolean validaSpinner()
    {
        try {
            // Check whether priceField.getText()'s length equals 0
            if(jSpinner1.getValue().toString().trim().length() == 0) 
                {
                throw new Exception();
                }
            } catch(Exception e) 
                {
                JOptionPane.showMessageDialog(rootPane,  "cantidad no puede estar vac√≠o");
                return false;
                }
        
         try {
            // Check whether priceField.getText()'s length equals 0
            int a = (int)jSpinner1.getValue();
               
            } catch(NumberFormatException e) 
                {
                JOptionPane.showMessageDialog(rootPane,  "cantidad debe ser un n√∫mero");
                return false;
                }
         
         if((int)jSpinner1.getValue()> Integer.parseInt(jLabel13.getText()))
         {
             JOptionPane.showMessageDialog(rootPane,  "cantidad excede inventario actual");
             return false;
         }
        return true;
    }
    

    
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        String var="";
        final int en =1;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           jTree1.getLastSelectedPathComponent();
        Productos p =null;
        /* if nothing is selected */ 
        if (node == null) return;

       
        Object nodeInfo = node.getUserObject();
        System.out.println("seleccionado : "+(String) nodeInfo);
        int valor=0;
        var=(String) nodeInfo;
         int resultado=0;int i=0;
        for (Productos a :aux2a)
        {resultado=0;
             resultado = var.indexOf(aux2a.get(i).getNombre()+" "+aux2a.get(i).getTalla()+" "+aux2a.get(i).getMedida() + "|  ID: "+aux2a.get(i).getId_producto());
            if (resultado!=-1)
                    p = a;i++;
        }
        
        
        if(p!=null)
        {
            jLabel8.setText(p.getNombre().trim());
            jLabel9.setText(p.getTipo().trim());
            jLabel10.setText(p.getMarca().trim());
            double imp=0;
            if(p.getHarina()==0){
             
                    imp=  (double) (p.getPrecioVenta()*1.0);
                    System.out.println(imp);
           int var2 = (int) Math.ceil(imp);
              
                    jLabel11.setText((Integer.toString((int)imp)));
            }else{
                          imp=  (double) (p.getPrecioVenta()*1.31);
           int var2 = (int) Math.ceil(imp);
              
                    jLabel11.setText((Integer.toString((int)imp)));
            }
            jLabel12.setText(p.getProveedor().trim());
            jLabel13.setText(Integer.toString(p.getCantidadp()));
            jLabel14.setText(p.getTalla().trim());
            jLabel15.setText(p.getColor().trim());
                  funciones f= new funciones();
               String path = f.getRutaFotoProducto()+p.getImagen();
            ImageIcon iconLogo = createImageIcon2(path);
            jLabel18.setIcon(iconLogo);
         
            
        }

    }//GEN-LAST:event_jTree1MouseClicked
private ArrayList<Productos> rehacercarro(ArrayList<Productos> carro){
 ArrayList<Productos> nuevocarro= new ArrayList<Productos>();
    for(int i=0;i<carro.size();i++){System.out.println("-----------------");
     if(carro.get(i).equals(null)){
        
     }else{
         //System.out.println(carro.get(i).getNombre());
       //   System.out.println(carro.get(i).getCantidadp());
          nuevocarro.add(carro.get(i));
     }
 }
    
    
    
    return nuevocarro;
}

private ArrayList<Productos> EliminarProducto(int id){
 ArrayList<Productos> nuevocarro= new ArrayList<Productos>();
    for(int i=0;i<this.carroProductosLocal.size();i++){System.out.println("-----------------");int cont=0;
     if(carroProductosLocal.get(i).getId_producto()==id){
         cont++;
                          System.out.println(carroProductosLocal.get(i).getNombre());
System.out.println("contador:"+cont);
         carroProductosLocal.remove(i);  i =0;
  carroProductosLocal=    rehacercarro(carroProductosLocal);
     }else{
    
     }
 }
    
    
    
    return carroProductosLocal;
}

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        int borrar = jTable1. getSelectedRow();
        //quitar no pone cantidad p bien
        int id_p = (Integer)jTable1.getValueAt(borrar, 0);
         int CANTIDAD = (Integer)jTable1.getValueAt(borrar, 6);
        
        try{
            carroProductosLocal=this.EliminarProducto(id_p);
            //carroProductosLocal.remove(borrar);
            modelo1.removeRow(borrar);
            for(Productos p: aux2a)
                if(p.getId_producto() == id_p)
                    p.setCantidadp(p.getCantidadp()+CANTIDAD);
                
            jTree1.requestFocus();
                jTextField1.requestFocus();
                            jLabel8.setText("-");
                             
                          
                    
                       
            jLabel9.setText("-");
            jLabel10.setText("-");
            jLabel11.setText("-");
            jLabel12.setText("-");
            jLabel13.setText("-");
            jLabel14.setText("-");
            jLabel15.setText("-");
            

        }catch(ArrayIndexOutOfBoundsException a)
        {
                       JOptionPane.showMessageDialog(rootPane,  "No ha seleccionado ning√∫n producto");

        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            Object[] object = new Object[10];int imp=0;
       if(carroProductosLocal.size()>0)
       {
            for(int i=0;i<carroProductosLocal.size();i++)
            {imp=0;
                System.out.println("Producto a Agregar : "+ carroProductosLocal.get(i).getNombre()+"\n");
                Productos producto = carroProductosLocal.get(i);
             object[0]  = producto.getId_producto();
              object[1] = producto.getNombre();
              object[2] = producto.getTalla();
              object[3] = producto.getMarca();
              object[4] = producto.getTipo();
             if(producto.getHarina()==0){
               imp=  (int) (producto.getPrecioVenta()*1.0);
                   object[5] =imp;
            }else{
                imp=  (int) (producto.getPrecioVenta()*1.31);
                    object[5] =imp;
            }
               
              object[6] = producto.getCodigo_barra();
               agregarTabla2(object);
///                modelo0.addRow(object);
                jTable0.setModel(modelo0);
            }
            this.carroProductos.addAll(carroProductosLocal);
            this.dispose();
            try {
                calculaTotales(this.carroProductos);
            } catch (SQLException ex) {
                Logger.getLogger(buscaProductoInventario.class.getName()).log(Level.SEVERE, null, ex);
            }
       }else
       {
           JOptionPane.showMessageDialog(rootPane,  "No ha seleccionado ning√∫n producto");

       }
    }//GEN-LAST:event_jButton4ActionPerformed
     
    
       public boolean buscarenTabla2(int id){
        int i =0;;System.out.println("ho2dla");
        while(i<modelo0.getRowCount() &&modelo0.getRowCount()!=0){
            if(Integer.parseInt(
                modelo0.getValueAt(i, 0).toString())==id){
                return true;
            }i++;
        }return false;
    }
    
       public int buscarenTablaIndex2(int id){
        int i =0;
        while(i<modelo0.getRowCount() &&modelo0.getRowCount()!=0){
            if(Integer.parseInt(modelo0.getValueAt(i, 0).toString())==id){
                return i;
            }i++;
        }return -1;
    }  
       
       
    public void agregarTabla2(Object[] object){
        boolean encontrado= false;
        encontrado=this.buscarenTabla2(Integer.parseInt(object[0].toString()));System.out.println("ho2la");
        if(encontrado==true ){System.out.println("hola");
        int position= this.buscarenTablaIndex2(Integer.parseInt(object[0].toString()));
          int cantidad=Integer.parseInt(modelo0.getValueAt(position, 6).toString())+1;
         modelo0.setValueAt(cantidad,position, 6);
        }else{int imp=0;
        
        System.out.println("hola3");
               
              object[6] = 1;
        
      this.modelo0.addRow(object);
        }
        
            
            
    }
    
    
    
        
       public boolean buscarenTabla(int id){
        int i =0;;System.out.println("ho2dla");
        while(i<modelo1.getRowCount()){
            if(Integer.parseInt(
                modelo1.getValueAt(i, 0).toString())==id){
                return true;
            }i++;
        }return false;
    }
    
       public int buscarenTablaIndex(int id){
        int i =0;
        while(i<modelo1.getRowCount()){
            if(Integer.parseInt(modelo1.getValueAt(i, 0).toString())==id){
                return i;
            }i++;
        }return -1;
    }  
       
       
    public void agregarTabla(Object[] object){
        boolean encontrado= false;
        encontrado=this.buscarenTabla(Integer.parseInt(object[0].toString()));System.out.println("ho2la");
        if(encontrado==true){System.out.println("hola");
        int position= this.buscarenTablaIndex(Integer.parseInt(object[0].toString()));
          int cantidad=Integer.parseInt(modelo1.getValueAt(position, 6).toString())+1;
         modelo1.setValueAt(cantidad,position, 6);
        }else{int imp=0;
        
        System.out.println("hola3");
               
              object[6] = 1;
        
      this.modelo1.addRow(object);
        }
        
            
            
    }
    
    
    public void calculaTotales(ArrayList<Productos> carroProductos) throws SQLException
 {
     int montoNeto=0;
     double iva_pesos = 0;
     int iva_porcentaje = 19;
     int montoTotal =0;
        int iva_harina_porcentaje = 12;
        int iva_harina=0;
     int montoharina=0;   //montoDescuento=this.promodescuento() ;
          montoDescuento=   this.promodescuento();
          
              System.out.println("MONTO DESCUENTO ACUMULADO"+montoDescuento+"\n");
     int sumaPrevia = 0;
     for(int i = 0 ; i< this.carroProductos.size();i++)
     {
          Productos producto = this.carroProductos.get(i);
         montoNeto+= producto.getPrecioVenta();
         System.out.println("MONTO NETO ACUMULADO"+montoNeto+"\n");
          double imp=  (double) (producto.getPrecioVenta()*1.0);
                    System.out.println(imp);
           int var2 = (int) Math.ceil(imp);
         
           if(producto.getHarina()==1){
                 double imp2=  (double) (producto.getPrecioVenta()*0.12);
                    System.out.println(imp2);
             int var3 = (int) Math.ceil(imp2);  
             iva_harina = (producto.getPrecioVenta()* iva_harina_porcentaje)/100;
             montoharina=var3+montoharina;
         }
     }
 
     sumaPrevia = montoNeto;
    j20.setText(Integer.toString(montoDescuento));
    iva_pesos = (sumaPrevia)*0.19;
 int var4 = (int) Math.ceil(iva_pesos);  
    j21.setText(Integer.toString(var4));  System.out.println("MONTO NETO iva"+var4+"\n");
     j23.setText(Integer.toString(montoharina));   
      montoTotal = sumaPrevia - montoDescuento+(int)var4+montoharina ;
      
   System.out.println("IMPUESTO: "+var4);
      System.out.println("MONTO TOTAL SIN IMP: "+sumaPrevia); 
       System.out.println("MONTO DESCUENTO: "+montoDescuento);
             System.out.println("MONTO TOTAL con IMP: "+montoTotal); 

      
    j22.setText(Integer.toString(montoTotal));
     
     
     
     
     
     
   
 }
    private int contadorpromo(int id) throws SQLException{
     
      metodosDB f = new metodosDB();int contador =0;
             promos=f.getPromociones(); Iterator<Promociones> it = promos.iterator();
     while (it.hasNext()) {
             Promociones promoactual=null;
    promoactual=it.next();
    if(promoactual.getIdPromo()==id){
        contador++;
    }
     }
     return contador;
 }  
 private int promodescuento() throws SQLException{
     int valordescuento=0;
  //carroProductos= empaquetaProductos2(carroProductos);
         metodosDB f = new metodosDB();
             promos=f.getPromociones();
          int contador=0;
             int descuento=0;int aux=9999999;
             int npromo=0;
     Iterator<Promociones> it = promos.iterator();
     int veces2=0;
 int id2=0;int veces=0;
while (it.hasNext()) {
    
   
//System.out.println("hola"+it.next().getIdPromo());
    Promociones promoactual=null;
    promoactual=it.next();
    boolean promoexito=false;
int monto=promoactual.getMontoDcto();
int cantidad=promoactual.getCantidad();
int id= promoactual.getId_producto();
int idpromo= promoactual.getIdPromo();
 

contador=0;
if( id2==idpromo && npromo>=0){

//contador promociones
  System.out.println("EL NPROMO ES :::::: "+npromo);
}else{
      npromo=this.contadorpromo(idpromo);

aux=999999;
id2=idpromo;
descuento=0;

boolean entro=false;
}


 for(int i = 0 ; i< carroProductos.size();i++)
     {
         if(carroProductos.get(i).getId_producto()==id){
              contador++;System.out.println("contador es hasta:"+contador);
              
         }else{
             
         }
        
   
     }
 


 
 if(promoactual.getCantidad()<=contador){
     veces2= (int)contador/cantidad; 
     if(veces2<aux){
              
 System.out.println("DIVISION VECES: "+veces2);

         aux=veces2;
         veces= veces2;  
     }
     
     promoexito=true;npromo--;
     
 }else{
     
     promoexito=false;
     
 }
  int val=promoactual.getCantidad();
  
 if(promoexito==true && npromo==0){
     
     
     
      System.out.println("CANTIDAD ES:"+cantidad);
   System.out.println("contador ES:"+contador);
   
   

       
       
    veces= veces2;  
    System.out.println("VECES ES:"+aux);  descuento= promoactual.getMontoDcto()*aux;
 valordescuento=valordescuento+descuento;
 
 
 

   
   
   
   }
    
         
     

}
     
     
     
     
     System.out.println(valordescuento+" : ESTE ES EL DESCUENTO");
     
     return valordescuento;}
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for(Productos p : carroProductosLocal)
        {
            p.setCantidadp(p.getCantidadp()+1);
        }
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        ArrayList<Productos> aux2a = null;
    String nombre = jTextField1.getText();

        try {
            aux2a = new metodosDB().getProductos();
        } catch (SQLException ex) {
            Logger.getLogger(buscaProductoInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(nombre.equals("")||nombre.equals("Buscar..."))
        {
            int i = 0;
            Object[] object = new Object[5];
            DefaultMutableTreeNode root = new DefaultMutableTreeNode( "Productos Disponibles" );

            while(aux2a.size()>i)
            {
                if(aux2a.get(i).getCantidadActual()>0)
                {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(aux2a.get(i).getNombre()+" "+aux2a.get(i).getTalla()+" "+aux2a.get(i).getMedida()+ "|  ID: "+aux2a.get(i).getId_producto());
                    root.add(nodo);
                }
                i++;
            }
            
        DefaultTreeModel modeloarbol = new DefaultTreeModel(root);
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree1.getCellRenderer();
        ImageIcon leafIcon = createImageIcon("/Iconos/emblem-sales.png");
        Icon closedIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
        Icon openIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
        renderer.setClosedIcon(closedIcon);
        renderer.setOpenIcon(openIcon);
        renderer.setLeafIcon(leafIcon);
        
        jTree1.setModel(modeloarbol);
        traverse(jTree1);
        
        String t[] = {"ID","PRODUCTO","U.MEDIDA","MARCA","TIPO","PRECIO VENTA","CANTIDAD"};
        modelo1.setColumnIdentifiers(t);
        jTable1.setModel(modelo1);
    
        }else
        {
            String nombreproducto="";
            int i = 0;
            Object[] object = new Object[5];
            DefaultMutableTreeNode root = new DefaultMutableTreeNode( "Productos Disponibles" );

            while(aux2a.size()>i)
            {   
                nombreproducto="";
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(aux2a.get(i).getNombre()+" "+aux2a.get(i).getTalla()+" "+aux2a.get(i).getMedida()+ "|  ID: "+aux2a.get(i).getId_producto());
                nombreproducto=aux2a.get(i).getNombre();
                nombreproducto=nombreproducto.toUpperCase();
               // nombreproducto=nombreproducto.replace(" ","");
                if((nombreproducto.indexOf(nombre.toUpperCase()))!=-1){
                    
                    
                    root.add(nodo);}
                i++;
            }


            DefaultTreeModel modeloarbol = new DefaultTreeModel(root);
            DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree1.getCellRenderer();
            ImageIcon leafIcon = createImageIcon("/Iconos/emblem-sales.png");
            Icon closedIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
            Icon openIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
            renderer.setClosedIcon(closedIcon);
            renderer.setOpenIcon(openIcon);
            renderer.setLeafIcon(leafIcon);

            jTree1.setModel(modeloarbol);
            traverse(jTree1);

    String t[] = {"ID","PRODUCTO","U.MEDIDA","MARCA","TIPO","PRECIO VENTA","CANTIDAD"};            modelo1.setColumnIdentifiers(t);
            jTable1.setModel(modelo1);       // TODO add your handling code here:
        }
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        // TODO add your handling code here:
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    
        ArrayList<Productos> aux2a = null;
    String nombre = jTextField1.getText();

        try {
            aux2a = new metodosDB().getProductos();
        } catch (SQLException ex) {
            Logger.getLogger(buscaProductoInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(nombre.equals("")||nombre.equals("Buscar..."))
        {
            int i = 0;
            Object[] object = new Object[5];
            DefaultMutableTreeNode root = new DefaultMutableTreeNode( "Productos Disponibles" );

            while(aux2a.size()>i)
            {
                if(aux2a.get(i).getCantidadActual()>0)
                {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(aux2a.get(i).getNombre()+" "+aux2a.get(i).getTalla()+" "+aux2a.get(i).getMedida()+ "|  ID: "+aux2a.get(i).getId_producto());
                    root.add(nodo);
                }
                i++;
            }
            
        DefaultTreeModel modeloarbol = new DefaultTreeModel(root);
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree1.getCellRenderer();
        ImageIcon leafIcon = createImageIcon("/Iconos/emblem-sales.png");
        Icon closedIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
        Icon openIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
        renderer.setClosedIcon(closedIcon);
        renderer.setOpenIcon(openIcon);
        renderer.setLeafIcon(leafIcon);
        
        jTree1.setModel(modeloarbol);
        traverse(jTree1);
        
        String t[] = {"ID","PRODUCTO","U.MEDIDA","MARCA","TIPO","PRECIO VENTA","CANTIDAD"};
        modelo1.setColumnIdentifiers(t);
        jTable1.setModel(modelo1);
    
        }else
        {
            String nombreproducto="";
            int i = 0;
            Object[] object = new Object[5];
            DefaultMutableTreeNode root = new DefaultMutableTreeNode( "Productos Disponibles" );

            while(aux2a.size()>i)
            {   
                nombreproducto="";
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(aux2a.get(i).getNombre()+" "+aux2a.get(i).getTalla()+" "+aux2a.get(i).getMedida()+ "|  ID: "+aux2a.get(i).getId_producto());
                nombreproducto=aux2a.get(i).getNombre();
                nombreproducto=nombreproducto.toUpperCase();
                if((nombreproducto.indexOf(nombre.toUpperCase()))!=-1){
                    root.add(nodo);}
                i++;
            }


            DefaultTreeModel modeloarbol = new DefaultTreeModel(root);
            DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree1.getCellRenderer();
            ImageIcon leafIcon = createImageIcon("/Iconos/emblem-sales.png");
            Icon closedIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
            Icon openIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
            renderer.setClosedIcon(closedIcon);
            renderer.setOpenIcon(openIcon);
            renderer.setLeafIcon(leafIcon);

            jTree1.setModel(modeloarbol);
            traverse(jTree1);

            String t[] = {"ID","PRODUCTO","U.MEDIDA","MARCA","TIPO","PRECIO VENTA","CANTIDAD"};
            modelo1.setColumnIdentifiers(t);
            jTable1.setModel(modelo1);       // TODO add your handling code here:
        }
               // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTree1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTree1KeyPressed

        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {System.out.println(" QUE TALA");
    String var="";
        final int en =1;
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           jTree1.getLastSelectedPathComponent();
        Productos p =null;
        /* if nothing is selected */ 
        if (node == null) return;

       
        Object nodeInfo = node.getUserObject();
        System.out.println("seleccionado : "+(String) nodeInfo);
        int valor=0;
        var=(String) nodeInfo;
         int resultado=0;int i=0;
        for (Productos a :aux2a)
        {resultado=0;
             resultado = var.indexOf(aux2a.get(i).getNombre()+" "+aux2a.get(i).getTalla()+" "+aux2a.get(i).getMedida() + "|  ID: "+aux2a.get(i).getId_producto());
            if (resultado!=-1)
                    p = a;i++;
        }
        
        
        if(p!=null)
        {
            jLabel8.setText(p.getNombre().trim());
            jLabel9.setText(p.getTipo().trim());
            jLabel10.setText(p.getMarca().trim());
            double imp=0;
            if(p.getHarina()==0){
             
                    imp=  (double) (p.getPrecioVenta()*1.0);
                    System.out.println(imp);
           int var2 = (int) Math.ceil(imp);
              
                    jLabel11.setText((Integer.toString((int)imp)));
            }else{
                          imp=  (double) (p.getPrecioVenta()*1.31);
           int var2 = (int) Math.ceil(imp);
              
                    jLabel11.setText((Integer.toString((int)imp)));
            }
            jLabel12.setText(p.getProveedor().trim());
            jLabel13.setText(Integer.toString(p.getCantidadp()));
            jLabel14.setText(p.getTalla().trim());
            jLabel15.setText(p.getColor().trim());
                  funciones f= new funciones();
               String path = f.getRutaFotoProducto()+p.getImagen();
            ImageIcon iconLogo = createImageIcon2(path);
            jLabel18.setIcon(iconLogo);
         
            
        }
    } // TODO add your handling code here:
    }//GEN-LAST:event_jTree1KeyPressed
    private void pintaArbol()
    {
        int i=0;
     DefaultMutableTreeNode root = new DefaultMutableTreeNode( "Productos Disponibles" );
    Collections.sort(this.aux2a, new Comparator<Productos>(){

			@Override
			public int compare(Productos o1, Productos o2) {
				return o1.getNombre().compareTo(o2.getNombre());
			}
			
			
		});
        while(aux2a.size()>i)
        {
            Productos p = aux2a.get(i);
            if(p.getCantidadActual()>0)
            {
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(p.getNombre()+" "+p.getTalla()+" "+p.getMedida()+ "|  ID: "+p.getId_producto());
                root.add(nodo);
            }
                            i++;

        }
        
       
        DefaultTreeModel modeloarbol = new DefaultTreeModel(root);
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree1.getCellRenderer();
        ImageIcon leafIcon = createImageIcon("/Iconos/emblem-sales.png");
        Icon closedIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
        Icon openIcon = createImageIcon("/Iconos/boxing_gloves_red.png");
        renderer.setClosedIcon(closedIcon);
        renderer.setOpenIcon(openIcon);
        renderer.setLeafIcon(leafIcon);
        
        jTree1.setModel(modeloarbol);
        traverse(jTree1);
    }
    private void iniciar() throws SQLException
        {
    
        int i = 0;
        Object[] object = new Object[5];
        pintaArbol();
        
        String t[] = {"ID","PRODUCTO","U.MEDIDA","MARCA","TIPO","PRECIO VENTA","CANTIDAD"};
        modelo1.setColumnIdentifiers(t);
        jTable1.setModel(modelo1);
        
        
        
        }
    
 
    
     public void traverse(JTree tree) { 
        TreeModel model = jTree1.getModel(); 
        if (model != null) { 
            Object root = model.getRoot(); 
            System.out.println(root.toString()); 
            walk(model,root); 
        } 
        else
            System.out.println("Tree is empty."); 
    } 
 
    protected void walk(TreeModel model, Object o){ 
        int cc; 
        cc = model.getChildCount(o); 
        for( int i=0; i < cc; i++) { 
            Object child = model.getChild(o, i ); 
            if (model.isLeaf(child)) {}
            else { 
                walk(model,child ); 
            } 
        } 
    }
    protected static ImageIcon createImageIcon2(String path) {
    if (path != null) {
        ImageIcon imageIcon =new ImageIcon(path);
        Image image = imageIcon.getImage();
        Image nueva = image.getScaledInstance(250,200,java.awt.Image.SCALE_FAST);
        imageIcon = new ImageIcon(nueva);
        
      return imageIcon;
    } else {
      System.err.println("Couldn't find file: " + path);
      return null;
    }
    
  }
    protected static ImageIcon createImageIcon(String path) {
    java.net.URL imgURL = frameInventarioActual.class.getResource(path);
    if (imgURL != null) {
      return new ImageIcon(imgURL);
    } else {
      System.err.println("Couldn't find file: " + path);
      return null;
    }
  }
    /**
     * @param args the command line arguments
     */
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}

